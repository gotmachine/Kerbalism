// ============================================================================
// Gotmachine's revisited fork profile
// ============================================================================

Profile
{
  name = default

  Supply
  {
    resource = ElectricCharge
    on_pod = 50.0
    on_eva = 33.0
    on_rescue = 10000.0
    low_message = $VESSEL batteries are almost empty@<i>We are squeezing the last bit of juice</i>|$VESSEL batteries are almost empty@<i>Shutting down non-essential systems</i>
    empty_message = There is no more ElectricCharge on $VESSEL@<i>Life support systems are off</i>|There is no more ElectricCharge on $VESSEL@<i>We lost control</i>
    refill_message = $VESSEL batteries recharged@<i>The crew is allowed music again</i>|$VESSEL batteries recharged@<i>Systems are back online</i>
  }

  Supply
  {
    resource = Supplies
    on_pod = 31.491405
    on_rescue = 50.0
    low_message = Food reserves are getting low on $VESSEL@<i>Anything edible is being scrutinized</i>
    empty_message = There is no more food on $VESSEL@<i>The crew prepare for the inevitable</i>
    refill_message = $VESSEL food reserves restored@<i>Double snack rations for everybody</i>
  }

  // Debug
	Supply
	{
		resource = Coolant
	}
  
  Supply
	{
		resource = PosWatts
	}
  
  Supply
	{
		resource = NegWatts
	}
  
  
  
  Rule
  {
    name = climatization
    degeneration = 0.000046296 // 6 hours at 1 K past threshold
    modifier = temp_diff
    warning_message = $ON_VESSEL$KERBAL feels cold|$ON_VESSEL$KERBAL is sweating
    danger_message = $ON_VESSEL$KERBAL is freezing to death|$ON_VESSEL$KERBAL is burning alive
    fatal_message = $ON_VESSEL$KERBAL froze to death|$ON_VESSEL$KERBAL was burned alive
    relax_message = $ON_VESSEL$KERBAL hypothermia is under control|$ON_VESSEL$KERBAL is hugging the climatizer
  }
	
  Process
  {
    name = above_295K_positive
    modifier = addwatts_pos // only active if NegWatts level = 1
    input = PosWatts@1.0
  }

  Process
  {
    name = below_295K_positive
    modifier = addwatts_neg // only active if PosWatts level = 1
    output = NegWatts@1.0
  }

  Process
  {
    name = above_295K_negative
    modifier = removewatts_pos // only active if NegWatts level = 1
    output = PosWatts@1.0
  }

  Process
  {
    name = below_295K_negative
    modifier = removewatts_neg // only active if PosWatts level = 1
    input = NegWatts@1.0
  }

  Process
  {
    name = habitat climatizer
    modifier = _ECLSS
    input = Coolant@0.25 // 1 coolant/s = 1 kW
    output = PosWatts@250.0
    dump = false
  }

  Process
  {
    name = habitat heater
    modifier = _ECLSS
    input = ElectricCharge@0.25 // 1 EC/s = 1 kW
    output = NegWatts@250.0
    dump = false
  }

  // Rule
  // {
    // name = eating
    // input = Supplies
    // output = Mulch
    // rate = 5.4 // USI value
    // interval = 10800.0 // 2 meals per-day
    // degeneration = 0.03333 // 30 meals, 15 days
    // warning_message = $ON_VESSEL$KERBAL is hungry
    // danger_message = $ON_VESSEL$KERBAL is starving
    // fatal_message = $ON_VESSEL$KERBAL starved to death
    // relax_message = $ON_VESSEL$KERBAL is enjoying some snacks right now
  // }

  // Rule
  // {
    // name = stress
    // degeneration = 0.00000000463 // 10000 days
    // variance = 0.33 // add per-kerbal variance
    // modifier = living_space,comfort,pressure
    // breakdown = true // trigger breakdown event instead of death
    // warning_message = $ON_VESSEL$KERBAL is losing $HIS_HER mind@<i>Concentration is becoming a problem</i>
    // danger_message = $ON_VESSEL$KERBAL is about to breakdown@<i>Starting to hear voices</i>
    // relax_message = $ON_VESSEL$KERBAL is thinking straight now@<i>Let's do it again!</i>
  // }

  // Rule
  // {
    // name = radiation
    // degeneration = 1.0 // just use the modifier
    // variance = 0.1 // add per-kerbal variance
    // modifier = radiation,shielding
    // warning_threshold = 25.0
    // danger_threshold = 37.5
    // fatal_threshold = 50.0
    // warning_message = $ON_VESSEL$KERBAL has been exposed to intense radiation
    // danger_message = $ON_VESSEL$KERBAL is reporting symptoms of radiation poisoning
    // fatal_message = $ON_VESSEL$KERBAL died after being exposed to extreme radiation
    // relax_message = $ON_VESSEL$KERBAL has recovered from radiation exposure
  // }

  // convention: 1 capacity = enough to recycle output of 1 crew member
  Process
  {
    name = water recycler
    modifier = _WaterRecycler
    input = ElectricCharge@0.0446
    input = WasteWater@0.0001115
    output = Water@0.0000892
    output = Waste@0.0000223
    dump = Waste
  }


  // convention: 1 capacity = enough to process output of 1 crew member
  Process
  {
    name = waste processor
    modifier = _WasteProcessor
    input = ElectricCharge@0.065556
    input = Waste@0.00010926
    output = Ammonia@0.05463
    dump = Waste
  }

  // convention: 1 capacity = enough to compress output of 1 crew member
  Process
  {
    name = waste compressor
    modifier = _WasteCompressor
    input = ElectricCharge@1.2
    input = Waste@0.00010926
    output = Shielding@0.0000003847183
    dump = false
  }

  Process
  {
    name = radioisotope generator
    modifier = _RTG
    input = _RTG@0.000000001888 // 28.8 kerbin-year half-life
    output = ElectricCharge@1.0
  }

  // hydrogen HHV : 141.80 MJ/Kg
  // hydrogen burned : 0,00001798 kg/s
  // -> energy production : 2,549 kW
  // -> conversion to EC at 60% efficiency : 1,5297 kW (EC/s)
  // -> 40% waste heat = 1,0198 kW (Coolant/s)
  Process
  {
    name = fuel cell
    modifier = _FuelCell
    input = Coolant@1.0
    input = Hydrogen@0.2 
    input = Oxygen@0.101319354
    output = Water@0.000160860
    output = ElectricCharge@1.5
    dump = Water
  }

  // Hydrazine HHV : 19.4 MJ/Kg
  // Monoprop burned : 0,000028841 kg/s
  // -> energy production : 0,5595 kW
  // -> conversion to EC at 60% efficiency : 0,336 kW (EC/s)
  // -> 40% waste heat = 0,224 kW (Coolant/s)
  Process
  {
    name = monoprop fuel cell
    modifier = _MonopropFuelCell
    input = Coolant@0.224
    input = Oxygen@0.0204247660
    input = MonoPropellant@0.0000072102 // (Hydrazine@0.0028725741)
    output = Nitrogen@0.0201535252
    output = Water@0.0000324275
    output = ElectricCharge@0.336
  }
}

// ============================================================================
// Add configurable Life Support System to all manned parts
// ============================================================================

@PART[*]:HAS[#CrewCapacity[>0]]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  MODULE
  {
    name = ProcessController
    resource = _ECLSS
    title = ECLSS
    capacity = #$../CrewCapacity$
    running = true
  }

  MODULE
  {
    name = ProcessController
    resource = _MonopropFuelCell
    title = Monoprop fuel cell
    capacity = #$../CrewCapacity$
    running = false
  }

  @MODULE[ProcessController],*
  {
    @capacity *= 1.67
  }

  MODULE
  {
    name = Configure
    title = Pod
    slots = 2
    
    SETUP
    {
      name = ECLSS
      desc = Atmosphere control.
      tech = advElectrics
      mass = 0.1
      cost = 1000

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _ECLSS
      }
    }
    
    SETUP
    {
      name = Monoprop Fuel Cell
      desc = An emergency fuel cell that burn <b>MonoPropellant</b>. Produce <b>Water</b> and <b>Nitrogen</b> as by-products.
      tech = advElectrics
      mass = 0.1
      cost = 1000

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _MonopropFuelCell
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = ProcessController
    title = ECLSS
    redundancy = Life Support
    repair = true // anyone
    mtbf = 72576000 // 8y
    extra_cost = 2.5
    extra_mass = 0.1
  }
}

// tweak number of slots
@PART[MK1CrewCabin|Mark2Cockpit|cupola]:NEEDS[ProfileDefault]:FOR[Kerbalism] { @MODULE[Configure] { @slots = 1 } }
@PART[mk3Cockpit_Shuttle]:NEEDS[ProfileDefault]:FOR[Kerbalism] { @MODULE[Configure] { @slots = 3 } }


// ============================================================================
// Add configurable supplies to inline containers
// ============================================================================

@PART[kerbalism-container-inline-*]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  RESOURCE
  {
    name = Supplies
    amount = 0.7224224
    maxAmount = 0.7224224
    @amount *= #$../ContainerVolume$
    @maxAmount *= #$../ContainerVolume$
  }

  RESOURCE
  {
    name = Mulch
    amount = 0.2775776
    maxAmount = 0.2775776
    @amount *= #$../ContainerVolume$
    @maxAmount *= #$../ContainerVolume$
  }
}


// ============================================================================
// Setup greenhouse
// ============================================================================

@PART[kerbalism-greenhouse]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  MODULE
  {
    name = Greenhouse

    crop_resource = Food                // name of resource produced by harvests
    crop_size = 2500.0                  // amount of resource produced by harvests
    crop_rate = 0.00000023148           // growth per-second when all conditions apply
    ec_rate = 2.5                       // EC/s consumed by the lamp at max intensity

    light_tolerance = 400.0             // minimum lighting flux required for growth, in W/m^2
    pressure_tolerance = 0.1            // minimum pressure required for growth, in sea level atmospheres
    radiation_tolerance = 0.000008333   // maximum radiation allowed for growth in rad/s, considered after shielding is applied

    lamps = Cylinder001                 // object with emissive texture used to represent lamp intensity graphically
    shutters = door                     // animation to manipulate shutters
    plants =                            // animation to represent plant growth graphically

    INPUT_RESOURCE
    {
      name = Ammonia
      rate = 0.00695                    // 37530 units required for crop
    }

    INPUT_RESOURCE
    {
      name = Water
      rate = 0.00023148                 // 1250 units required for crop
    }

    OUTPUT_RESOURCE
    {
      name = Oxygen
      rate = 0.00463                    // 25% of oxygen required by 1 crew member
    }

    OUTPUT_RESOURCE
    {
      name = WasteWater
      rate = 0.00023033
    }
  }

  MODULE
  {
    name = Habitat
    toggle = false
  }

  MODULE
  {
    name = ProcessController
    resource = _PressureControl
    title = Pressure control
    capacity = 0.2143
    running = true
  }

  RESOURCE
  {
    name = Waste
    amount = 0
    maxAmount = 10
  }

  RESOURCE
  {
    name = Ammonia
    amount = 1000
    maxAmount = 1000
  }
}


// ============================================================================
// RTG
// ============================================================================

@PART[rtg]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  MODULE
  {
    name = ProcessController
    resource = _RTG
    title = RTG
    capacity = 0.75
    running = true
    toggle = false
  }

  !MODULE[ModuleGenerator] {}
}


// ============================================================================
// Fuel cells
// ============================================================================

@PART[FuelCell]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  !MODULE[ModuleResourceConverter] {}
  !RESOURCE[ElectricCharge] {}

  MODULE
  {
    name = ProcessController
    resource = _FuelCell
    title = Fuel cell
    capacity = 1
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = ProcessController
    title = Fuel Cell
    redundancy = Power Generation
    repair = Engineer
    mtbf = 72576000 // 8y
    extra_cost = 1.0
    extra_mass = 0.5
  }

  @TechRequired = basicScience
}

@PART[FuelCellArray]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  !MODULE[ModuleResourceConverter] {}
  !RESOURCE[ElectricCharge] {}

  MODULE
  {
    name = ProcessController
    resource = _FuelCell
    title = Fuel cell
    capacity = 6
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = ProcessController
    title = Fuel Cell
    redundancy = Power Generation
    repair = Engineer
    mtbf = 72576000 // 8y
    extra_cost = 1.0
    extra_mass = 0.5
  }
}


// ============================================================================
// ISRU chemical plants
// ============================================================================

@PART[kerbalism-chemicalplant,MiniISRU,ISRU,smallISRU]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[Lf+Ox]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[LiquidFuel]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[Oxidizer]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[Monoprop]] {}
  !MODULE[ModuleResourceConverter]:HAS[#ConverterName[MonoPropellant]] {}
  !MODULE[ModuleOverheatDisplay] {}
  !MODULE[ModuleCoreHeat] {}

  MODULE
  {
    name = ProcessController
    resource = _WasteCompressor
    title = Waste compressor
    capacity = 1
  }

  MODULE
  {
    name = Configure
    title = Chemical Plant
    slots = 1

    SETUP
    {
      name = Waste Compressor
      desc = Compact <b>Waste</b> to the density of lead, for use in radiation shielding.
      tech = precisionEngineering

      MODULE
      {
        type = ProcessController
        id_field = resource
        id_value = _WasteCompressor
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = ProcessController
    title = Chemical Plant
    repair = Engineer
    mtbf = 72576000 // 8y
    extra_cost = 1.0
    extra_mass = 0.2
  }
}

@PART[MiniISRU]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  @MODULE[ProcessController],*
  {
    @capacity *= 3.3
  }
}

@PART[ISRU]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  @MODULE[ProcessController],*
  {
    @capacity *= 5.0
  }

  @MODULE[Configure]
  {
    %slots = 2
  }
}

@PART[smallISRU]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  @MODULE[ProcessController],*
  {
    @capacity *= 2.0
  }
}


// ============================================================================
// ISRU drills
// ============================================================================

@PART[MiniDrill,RadialDrill]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  !MODULE[ModuleResourceHarvester] {}
  !MODULE[ModuleOverheatDisplay] {}
  !MODULE[ModuleCoreHeat] {}

  MODULE
  {
    name = Harvester
    title = Water Extraction
    drill = ImpactTransform
    length = 1.25
    type = 0
    resource = Water
    min_abundance = 0.01
    rate = 0.0005
    ec_rate = 1.0
  }

  MODULE
  {
    name = Harvester
    title = Ore Extraction
    drill = ImpactTransform
    length = 1.25
    type = 0
    resource = Ore
    min_abundance = 0.02
    rate = 0.0025
    ec_rate = 1.0
  }

  MODULE
  {
    name = Configure
    title = Drill
    slots = 1

    SETUP
    {
      name = Water Extraction
      desc = Extract <b>Water</b> from the surface.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Water
      }

      RESOURCE
      {
        name = Water
        amount = 0
        maxAmount = 50
      }
    }

    SETUP
    {
      name = Ore Extraction
      desc = Extract <b>Ore</b> from the surface.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Ore
      }

      RESOURCE
      {
        name = Ore
        amount = 0
        maxAmount = 50
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = Harvester
    title = Harvester
    repair = Engineer
    mtbf = 72576000 // 8y
    extra_cost = 1.0
    extra_mass = 0.2
  }
}
@PART[RadialDrill]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  @MODULE[Harvester],*
  {
    @rate *= 5
    @ec_rate *= 5
    @length = 5.0
  }
}


// ============================================================================
// atmospheric harvester
// the atmospheric experiment part is used as an atmospheric harvester
// ============================================================================

@PART[sensorAtmosphere]:NEEDS[ProfileDefault]:FOR[Kerbalism]
{
  MODULE
  {
    name = Harvester
    title = CO2 Filter
    type = 2
    resource = CarbonDioxide
    min_abundance = 0.0025
    min_pressure = 4.0
    rate = 0.2
    ec_rate = 0.5
  }

  MODULE
  {
    name = Harvester
    title = Oxygen Filter
    type = 2
    resource = Oxygen
    min_abundance = 0.02
    min_pressure = 5.0
    rate = 0.25
    ec_rate = 0.5
  }

  MODULE
  {
    name = Harvester
    title = Nitrogen Filter
    type = 2
    resource = Nitrogen
    min_abundance = 0.01
    min_pressure = 2.0
    rate = 0.35
    ec_rate = 0.5
  }

  MODULE
  {
    name = Configure
    title = Atmospheric Filter
    slots = 1

    SETUP
    {
      name = CO2 Filter
      desc = Extract <b>CO2</b> from the atmosphere.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = CarbonDioxide
      }
    }

    SETUP
    {
      name = Oxygen Filter
      desc = Extract <b>Oxygen</b> from the atmosphere.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Oxygen
      }
    }

    SETUP
    {
      name = Nitrogen Filter
      desc = Extract <b>Nitrogen</b> from the atmosphere.

      MODULE
      {
        type = Harvester
        id_field = resource
        id_value = Nitrogen
      }
    }
  }

  MODULE:NEEDS[FeatureReliability]
  {
    name = Reliability
    type = Harvester
    title = Harvester
    repair = Engineer
    mtbf = 72576000 // 8y
    extra_cost = 1.0
    extra_mass = 0.5
  }

  @mass = 0.2
}


// ============================================================================
// Pseudo-resources used by processes
// ============================================================================

RESOURCE_DEFINITION
{
  name = _ECLSS
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WasteProcessor
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _RTG
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _FuelCell
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _MonopropFuelCell
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _WasteCompressor
  density = 0.0
  isVisible = false
}
